{"version":3,"sources":["app/hooks.ts","containers/home/searchSlice.ts","containers/home/kittySlice.ts","containers/errorBoundary/ErrorBoundry.tsx","components/searchBox/SearchBox.tsx","components/card/Card.tsx","components/card/CardList.tsx","components/title/Title.tsx","containers/home/Home.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","searchSlice","createSlice","name","initialState","searchField","reducers","setSearchField","state","action","payload","actions","selectSearchField","search","getKittiesAsync","createAsyncThunk","_","a","rejectWithValue","fetch","response","json","data","kittySlice","isPending","kitties","error","extraReducers","builder","addCase","pending","fulfilled","rejected","String","selectKitty","kitty","ErrorBoundry","props","hasError","this","setState","children","Component","SearchBox","memo","searchChange","className","type","placeholder","onChange","Card","id","email","width","height","src","alt","CardList","map","Title","context","Home","dispatch","useDispatch","stableDispatch","useCallback","useEffect","filteredKitties","filter","toLowerCase","includes","event","target","value","href","App","store","configureStore","reducer","searchReducer","kittyReduce","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fe83b333.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface SearchState {\n  searchField: string;\n}\n\nconst initialState: SearchState = {\n  searchField: '',\n};\n\n// Creating reducers and generate actions\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    setSearchField: (state, action: PayloadAction<string>) => {\n      state.searchField = action.payload;\n    },\n  },\n});\n\n// Exporting all the actions\nexport const { setSearchField } = searchSlice.actions;\n\n// Create selector to get the state from root state.\nexport const selectSearchField = (state: RootState) => state.search.searchField;\n\nexport default searchSlice.reducer;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport type Kitty = {\n  id: number;\n  name: string;\n  email: string;\n};\n\nexport interface KittyState {\n  kitties: Array<Kitty>;\n  isPending: boolean;\n  error: string;\n}\n\nconst initialState: KittyState = {\n  isPending: false,\n  kitties: [],\n  error: '',\n};\n\n// A thunk for fetching kittles\nexport const getKittiesAsync = createAsyncThunk(\n  'kitty/fetchKitties',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      const data = await response.json();\n      // Will become the `fulfilled` action payload\n      return data;\n    } catch (e) {\n      return rejectWithValue('Something went wrong.');\n    }\n  }\n);\n\n// Create kitty slice\nexport const kittySlice = createSlice({\n  name: 'kitty',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getKittiesAsync.pending, (state) => {\n        state.isPending = true;\n      })\n      .addCase(getKittiesAsync.fulfilled, (state, action) => {\n        state.isPending = false;\n        state.kitties = action.payload;\n      })\n      .addCase(getKittiesAsync.rejected, (state, action) => {\n        state.isPending = false;\n        state.error = String(action.payload);\n      });\n  },\n});\n\nexport const selectKitty = (state: RootState) => state.kitty;\n\nexport default kittySlice.reducer;\n","import React, { Component } from 'react';\n\nexport class ErrorBoundry extends Component {\n  state: { hasError: boolean } = {\n    hasError: false,\n  };\n\n  constructor(props: any = {}) {\n    super(props);\n  }\n\n  // This is like `try catch`\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. That is not good :(</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n","import React, { memo } from 'react';\n\ninterface SearchChangeProp {\n  searchChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchBox = memo(({ searchChange }: SearchChangeProp) => {\n  return (\n    <>\n      <input\n        data-testid=\"search-field\"\n        className=\"inline-flex p-3 rounded-lg text-gray-300 border-2 border-gray-800 w-full md:w-2/3 lg:w-1/3 focus:outline-none focus:ring focus:border-gray-800 bg-gray-700\"\n        type=\"search\"\n        placeholder=\"Search for a kitty...\"\n        onChange={searchChange}\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport { Kitty } from '../../containers/home/kittySlice';\n\nexport const Card = ({ id, name, email }: Kitty) => {\n  return (\n    <div\n      className=\"flex flex-col items-center p-5 rounded-lg shadow-lg transition-transform hover:scale-110 bg-gray-800 text-gray-400\"\n      data-testid=\"kitty-card\"\n    >\n      <img\n        width=\"200\"\n        height=\"200\"\n        src={`https://robohash.org/${id}?set=set4&size=200x200`}\n        alt=\"kitty\"\n      />\n      <div className=\"flex flex-col items-center\">\n        <h2 className=\"pt-2 font-bold text-xl\">{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Card } from './Card';\nimport { Kitty } from '../../containers/home/kittySlice';\n\nexport const CardList = ({ data }: { data: Array<Kitty> }) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 justify-center\">\n      {data.map(({ id, name, email }) => {\n        return <Card id={id} name={name} email={email} key={id} />;\n      })}\n    </div>\n  );\n};\n","import React, { memo } from 'react';\n\nexport const Title = memo(({ context }: { context: string }) => {\n  return (\n    <div className=\"flex flex-col justify-center\">\n      <h1 className=\"main-title text-5xl text-gray-100 mb-1 mt-6 mr-6\">\n        {context}\n      </h1>\n      <h5 className=\"text-blue-300 mb-8 font-bold italic\">With TypeScript</h5>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { setSearchField, selectSearchField } from './searchSlice';\nimport { getKittiesAsync, selectKitty } from './kittySlice';\n\nimport { ErrorBoundry } from '../../containers/errorBoundary/ErrorBoundry';\nimport { SearchBox } from '../../components/searchBox/SearchBox';\nimport { CardList } from '../../components/card/CardList';\nimport { Title } from '../../components/title/Title';\n\nexport const Home = () => {\n  const searchField = useAppSelector(selectSearchField);\n  const { kitties, isPending } = useAppSelector(selectKitty);\n  const dispatch = useAppDispatch();\n\n  // `Dispatch` comes from a custom `hook`, so it doesn't have an stable\n  // signature and it will change on each render (reference equality)\n  // Add an aditional layer of dependencies by wrapping the hanlder inside a `useCallback` hook\n  const stableDispatch = useCallback(dispatch, [dispatch]);\n\n  // Mounted life cycle\n  useEffect(() => {\n    stableDispatch(getKittiesAsync());\n  }, [stableDispatch]);\n\n  const filteredKitties = kitties.filter((kitty) => {\n    return kitty.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setSearchField(event.target.value));\n  };\n\n  return (\n    <div className=\"block w-full px-6\">\n      <div className=\"max-w-4xl lg:max-w-6xl mx-auto pb-12 py-6\">\n        <div className=\"flex flex-col justify-center items-center my-6\">\n          {isPending ? (\n            <>\n              <Title context=\"Loading...\" />\n            </>\n          ) : (\n            <>\n              <Title context=\"Kitty Friends\" />\n            </>\n          )}\n          <SearchBox searchChange={onSearchChange} />\n        </div>\n        <ErrorBoundry>\n          <CardList data={filteredKitties} />\n        </ErrorBoundry>\n        <div className=\"flex flex-col items-center mt-10 text-gray-400 text-lg\">\n          <p>\n            Made with 💎 by\n            <a href=\"https://github.com/TriDiamond\"> Tridiamond</a>\n          </p>\n          <p>Build with React + Redux</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n// import { Counter } from './features/counter/Counter';\nimport { Home } from './containers/home/Home';\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport searchReducer from '../containers/home/searchSlice';\nimport kittyReduce from '../containers/home/kittySlice';\n\nexport const store = configureStore({\n  reducer: {\n    search: searchReducer,\n    kitty: kittyReduce,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}